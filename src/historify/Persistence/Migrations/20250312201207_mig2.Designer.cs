// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20250312201207_mig2")]
    partial class mig2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ActivationKey")
                        .HasColumnType("text")
                        .HasColumnName("ActivationKey");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVerified");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FileAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FilePath");

                    b.Property<string>("StorageType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("StorageType");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<Guid?>("UserImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserImageId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserImageId")
                        .IsUnique();

                    b.ToTable("FileAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "DemoUser"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVerified");

                    b.Property<byte[]>("SecretKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("SecretKey");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OtpAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CreatedByIp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpiresDate");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("text")
                        .HasColumnName("ReasonRevoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text")
                        .HasColumnName("ReplacedByToken");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text")
                        .HasColumnName("RevokedByIp");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RevokedDate");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("integer")
                        .HasColumnName("AuthenticatorType");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CountryCode");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Surname");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@domain.com",
                            Name = "Admin",
                            PasswordHash = new byte[] { 243, 141, 73, 155, 1, 3, 54, 43, 105, 143, 221, 224, 91, 64, 114, 72, 41, 176, 146, 127, 104, 132, 203, 191, 140, 60, 84, 73, 228, 82, 22, 65, 187, 150, 229, 95, 152, 146, 86, 50, 95, 43, 12, 176, 143, 62, 83, 54, 20, 203, 42, 185, 146, 208, 89, 168, 204, 238, 64, 248, 246, 206, 104, 184 },
                            PasswordSalt = new byte[] { 198, 155, 253, 43, 126, 87, 178, 155, 137, 172, 158, 187, 57, 195, 112, 120, 109, 164, 222, 23, 212, 14, 255, 237, 248, 147, 11, 176, 55, 150, 5, 137, 174, 168, 65, 15, 106, 187, 162, 25, 68, 87, 89, 43, 36, 241, 124, 60, 208, 95, 160, 96, 39, 151, 23, 151, 59, 153, 8, 196, 209, 177, 19, 190, 59, 220, 204, 154, 151, 31, 137, 173, 24, 219, 16, 64, 17, 119, 178, 68, 175, 101, 17, 116, 169, 211, 118, 67, 2, 15, 211, 224, 243, 131, 208, 74, 210, 77, 24, 69, 198, 168, 72, 205, 34, 175, 42, 248, 146, 82, 185, 65, 160, 220, 148, 131, 239, 252, 66, 128, 144, 196, 24, 213, 187, 246, 74, 140 },
                            PhoneNumber = "5555555555",
                            Surname = "User",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "user@domain.com",
                            Name = "Standard",
                            PasswordHash = new byte[] { 29, 109, 200, 72, 52, 247, 55, 47, 211, 43, 33, 57, 78, 164, 213, 117, 21, 153, 198, 70, 252, 197, 254, 78, 204, 246, 249, 57, 10, 215, 162, 62, 6, 89, 6, 87, 133, 114, 185, 189, 92, 118, 251, 134, 213, 164, 85, 138, 222, 219, 181, 183, 167, 42, 102, 227, 237, 143, 102, 246, 171, 175, 184, 171 },
                            PasswordSalt = new byte[] { 182, 24, 136, 216, 95, 57, 154, 145, 177, 251, 59, 32, 144, 185, 98, 116, 236, 45, 73, 167, 164, 114, 21, 167, 129, 168, 219, 237, 126, 210, 108, 120, 179, 216, 160, 185, 83, 250, 45, 19, 70, 181, 12, 248, 220, 99, 87, 62, 19, 29, 83, 12, 41, 188, 59, 130, 46, 203, 113, 2, 62, 160, 90, 31, 169, 94, 180, 237, 123, 205, 26, 213, 220, 110, 132, 128, 158, 183, 32, 39, 200, 149, 216, 140, 210, 229, 166, 129, 38, 135, 104, 245, 159, 154, 26, 129, 24, 165, 9, 75, 86, 100, 248, 226, 192, 71, 193, 61, 196, 125, 167, 244, 215, 189, 54, 231, 40, 236, 31, 162, 228, 175, 67, 14, 92, 99, 4, 208 },
                            PhoneNumber = "5555555556",
                            Surname = "User",
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "demo@domain.com",
                            Name = "Demo",
                            PasswordHash = new byte[] { 156, 230, 225, 198, 141, 156, 223, 229, 231, 119, 35, 77, 33, 69, 77, 81, 0, 100, 220, 202, 162, 216, 4, 195, 165, 95, 20, 155, 185, 71, 152, 254, 24, 33, 211, 12, 81, 143, 209, 154, 194, 203, 117, 196, 77, 101, 246, 39, 181, 145, 168, 81, 38, 84, 239, 116, 207, 34, 219, 80, 11, 244, 252, 130 },
                            PasswordSalt = new byte[] { 244, 116, 157, 17, 139, 173, 104, 40, 86, 232, 79, 57, 201, 16, 80, 184, 227, 185, 241, 194, 103, 28, 211, 195, 163, 87, 214, 66, 40, 55, 167, 65, 136, 72, 115, 236, 96, 151, 237, 164, 194, 53, 140, 164, 87, 131, 253, 72, 178, 219, 135, 169, 205, 220, 247, 245, 112, 167, 212, 85, 74, 45, 228, 31, 61, 54, 58, 123, 139, 170, 125, 163, 162, 41, 176, 230, 187, 186, 30, 11, 190, 147, 138, 230, 1, 157, 182, 88, 1, 127, 71, 186, 121, 7, 53, 86, 39, 104, 53, 245, 135, 169, 226, 138, 164, 176, 131, 16, 150, 53, 30, 20, 114, 36, 225, 144, 21, 226, 253, 133, 4, 157, 80, 11, 93, 250, 62, 226 },
                            PhoneNumber = "5555555557",
                            Surname = "User",
                            UserName = "demo"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "nadircandegirmendere@gmail.com",
                            Name = "Nadir can",
                            PasswordHash = new byte[] { 17, 211, 212, 16, 206, 56, 161, 192, 1, 53, 80, 47, 40, 55, 23, 84, 106, 138, 104, 100, 155, 233, 71, 204, 209, 109, 124, 236, 160, 131, 245, 240, 148, 181, 105, 21, 250, 112, 5, 130, 44, 90, 24, 178, 4, 19, 17, 50, 254, 212, 208, 138, 194, 105, 38, 93, 246, 66, 178, 247, 145, 185, 253, 241 },
                            PasswordSalt = new byte[] { 253, 12, 72, 155, 140, 195, 15, 126, 6, 185, 210, 129, 80, 107, 243, 122, 249, 117, 83, 240, 50, 106, 234, 132, 114, 8, 70, 207, 243, 147, 248, 34, 95, 143, 5, 147, 200, 215, 126, 72, 49, 7, 123, 16, 255, 217, 86, 123, 245, 5, 66, 128, 211, 59, 11, 90, 235, 18, 68, 130, 197, 98, 235, 34, 202, 81, 153, 101, 207, 218, 102, 130, 132, 239, 123, 235, 6, 95, 123, 188, 126, 21, 69, 130, 92, 126, 108, 47, 42, 177, 65, 33, 241, 111, 21, 223, 133, 201, 54, 36, 12, 22, 241, 130, 155, 88, 224, 192, 72, 141, 30, 71, 60, 103, 142, 247, 189, 81, 246, 188, 206, 118, 129, 196, 57, 74, 141, 87 },
                            PhoneNumber = "5555555558",
                            Surname = "Degirmendere",
                            UserName = "cansnow"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Tags")
                        .HasColumnType("text")
                        .HasColumnName("Tags");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UploadDate");

                    b.HasKey("Id");

                    b.ToTable("UserImages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("OperationClaimId")
                        .HasColumnType("uuid")
                        .HasColumnName("OperationClaimId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000003"),
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        });
                });

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("EmailAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.FileAttachment", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("FileAttachments")
                        .HasForeignKey("UserId");

                    b.HasOne("Domain.Entities.UserImage", "UserImage")
                        .WithOne("FileAttachment")
                        .HasForeignKey("Domain.Entities.FileAttachment", "UserImageId");

                    b.Navigation("User");

                    b.Navigation("UserImage");
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("OtpAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("EmailAuthenticators");

                    b.Navigation("FileAttachments");

                    b.Navigation("OtpAuthenticators");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Domain.Entities.UserImage", b =>
                {
                    b.Navigation("FileAttachment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
