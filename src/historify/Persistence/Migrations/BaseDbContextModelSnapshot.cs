// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ActivationKey")
                        .HasColumnType("text")
                        .HasColumnName("ActivationKey");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVerified");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FileAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("FilePath");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer")
                        .HasColumnName("StorageType");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UploadDate");

                    b.Property<Guid?>("UserImageId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("UserImageId");

                    b.HasKey("Id");

                    b.ToTable("FileAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVerified");

                    b.Property<byte[]>("SecretKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("SecretKey");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OtpAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CreatedByIp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpiresDate");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("text")
                        .HasColumnName("ReasonRevoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text")
                        .HasColumnName("ReplacedByToken");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text")
                        .HasColumnName("RevokedByIp");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RevokedDate");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("integer")
                        .HasColumnName("AuthenticatorType");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("CountryCode");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Surname");

                    b.Property<int?>("TotalSearchCount")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("TotalSearchCount");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("CountryCode", "PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@domain.com",
                            Name = "Admin",
                            PasswordHash = new byte[] { 208, 214, 151, 67, 180, 148, 249, 167, 61, 224, 204, 207, 0, 220, 216, 159, 255, 59, 244, 33, 45, 103, 72, 164, 202, 53, 110, 88, 131, 76, 93, 177, 221, 156, 51, 118, 15, 234, 95, 41, 47, 156, 192, 155, 176, 114, 113, 65, 49, 157, 170, 179, 193, 65, 12, 205, 31, 108, 222, 109, 62, 141, 41, 47 },
                            PasswordSalt = new byte[] { 248, 242, 182, 151, 148, 206, 234, 215, 122, 1, 156, 128, 226, 229, 57, 97, 45, 215, 171, 239, 94, 13, 114, 26, 100, 99, 61, 174, 203, 77, 234, 86, 66, 223, 203, 196, 167, 100, 187, 93, 54, 92, 209, 147, 87, 192, 87, 26, 107, 22, 170, 187, 85, 132, 248, 103, 84, 169, 27, 242, 5, 237, 5, 74, 10, 146, 51, 96, 22, 6, 85, 129, 95, 246, 215, 150, 239, 249, 160, 15, 89, 89, 174, 31, 60, 63, 25, 81, 4, 117, 200, 53, 169, 211, 93, 31, 124, 109, 48, 200, 21, 243, 61, 188, 29, 252, 131, 34, 19, 202, 131, 113, 66, 253, 248, 178, 64, 94, 39, 216, 66, 121, 222, 165, 154, 44, 185, 200 },
                            PhoneNumber = "5555555555",
                            Surname = "User",
                            TotalSearchCount = 0,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "user@domain.com",
                            Name = "Standard",
                            PasswordHash = new byte[] { 26, 10, 207, 76, 245, 238, 217, 157, 47, 132, 64, 156, 68, 208, 253, 34, 148, 51, 225, 116, 45, 155, 95, 165, 52, 22, 148, 49, 94, 67, 28, 199, 79, 144, 118, 57, 110, 90, 16, 154, 173, 243, 106, 107, 236, 175, 116, 125, 111, 151, 143, 59, 149, 231, 117, 249, 170, 238, 74, 10, 255, 190, 8, 69 },
                            PasswordSalt = new byte[] { 227, 202, 132, 218, 167, 198, 49, 104, 148, 71, 216, 122, 10, 46, 38, 33, 60, 111, 54, 178, 49, 181, 209, 13, 64, 141, 119, 60, 52, 90, 31, 174, 237, 102, 165, 100, 33, 66, 147, 69, 25, 105, 124, 44, 131, 82, 26, 63, 51, 168, 145, 124, 163, 1, 226, 148, 220, 13, 217, 126, 169, 186, 145, 216, 31, 21, 105, 86, 248, 180, 58, 21, 76, 30, 195, 88, 170, 30, 119, 204, 83, 99, 244, 217, 96, 85, 254, 180, 141, 117, 56, 159, 50, 36, 252, 95, 65, 118, 84, 81, 95, 176, 88, 177, 34, 100, 76, 24, 32, 62, 169, 255, 77, 158, 254, 141, 124, 11, 186, 183, 86, 207, 185, 13, 253, 85, 83, 152 },
                            PhoneNumber = "5555555556",
                            Surname = "User",
                            TotalSearchCount = 0,
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "demo@domain.com",
                            Name = "Demo",
                            PasswordHash = new byte[] { 179, 225, 128, 111, 207, 123, 212, 211, 167, 50, 80, 113, 127, 29, 42, 164, 140, 64, 90, 90, 114, 62, 31, 173, 200, 196, 189, 60, 62, 106, 65, 168, 43, 6, 203, 144, 127, 7, 211, 218, 123, 249, 132, 187, 122, 41, 70, 172, 114, 18, 125, 100, 253, 227, 35, 227, 65, 35, 199, 242, 10, 175, 175, 216 },
                            PasswordSalt = new byte[] { 88, 54, 127, 93, 79, 152, 89, 202, 73, 198, 53, 187, 229, 209, 145, 233, 160, 164, 45, 217, 93, 41, 214, 128, 129, 140, 53, 190, 236, 58, 232, 100, 213, 215, 223, 117, 112, 181, 96, 246, 212, 91, 169, 183, 161, 121, 88, 220, 228, 226, 232, 20, 248, 87, 95, 8, 157, 255, 51, 85, 12, 7, 51, 224, 137, 187, 251, 2, 11, 207, 166, 246, 196, 16, 205, 139, 145, 60, 74, 109, 176, 236, 214, 242, 145, 4, 116, 212, 179, 123, 26, 79, 111, 4, 168, 96, 107, 141, 45, 176, 191, 221, 50, 48, 141, 161, 116, 68, 178, 253, 215, 146, 26, 111, 221, 186, 110, 121, 4, 6, 144, 110, 70, 187, 99, 177, 2, 136 },
                            PhoneNumber = "5555555557",
                            Surname = "User",
                            TotalSearchCount = 0,
                            UserName = "demo"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "nadircandegirmendere@gmail.com",
                            Name = "Nadir can",
                            PasswordHash = new byte[] { 14, 22, 86, 109, 202, 228, 228, 117, 141, 210, 141, 243, 170, 164, 101, 104, 116, 130, 34, 228, 201, 105, 94, 209, 134, 197, 228, 182, 97, 182, 148, 170, 251, 223, 193, 136, 141, 104, 242, 22, 245, 68, 8, 170, 215, 126, 40, 62, 92, 197, 121, 135, 112, 86, 42, 187, 129, 4, 190, 213, 38, 242, 55, 107 },
                            PasswordSalt = new byte[] { 34, 142, 50, 7, 243, 254, 33, 65, 135, 165, 207, 75, 115, 53, 224, 234, 35, 115, 241, 173, 225, 8, 249, 131, 49, 101, 207, 240, 21, 1, 0, 70, 205, 98, 125, 21, 165, 180, 23, 2, 18, 26, 91, 199, 88, 82, 53, 146, 126, 228, 151, 70, 132, 8, 172, 160, 175, 148, 148, 1, 59, 37, 49, 59, 52, 54, 24, 122, 6, 237, 23, 235, 7, 61, 251, 250, 179, 99, 4, 17, 37, 7, 43, 40, 104, 24, 195, 84, 215, 3, 194, 98, 165, 11, 181, 164, 199, 196, 41, 112, 216, 172, 174, 32, 206, 176, 46, 184, 68, 245, 19, 116, 234, 169, 139, 246, 87, 247, 195, 127, 64, 154, 37, 27, 203, 22, 3, 135 },
                            PhoneNumber = "5555555558",
                            Surname = "Degirmendere",
                            TotalSearchCount = 0,
                            UserName = "cansnow"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<int>("DescriptionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("FileAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("FileAttachmentId");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Tags");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UploadDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FileAttachmentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserImages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("OperationClaimId")
                        .HasColumnType("uuid")
                        .HasColumnName("OperationClaimId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("EmailAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("OtpAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserImage", b =>
                {
                    b.HasOne("Domain.Entities.FileAttachment", "FileAttachment")
                        .WithOne("UserImage")
                        .HasForeignKey("Domain.Entities.UserImage", "FileAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileAttachment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.FileAttachment", b =>
                {
                    b.Navigation("UserImage");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("EmailAuthenticators");

                    b.Navigation("OtpAuthenticators");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserImages");

                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
