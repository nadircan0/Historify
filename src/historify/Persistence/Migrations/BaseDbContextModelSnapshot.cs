// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("ActivationKey")
                        .HasColumnType("text")
                        .HasColumnName("ActivationKey");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVerified");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.FileAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("FileName");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("FilePath");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer")
                        .HasColumnName("StorageType");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UploadDate");

                    b.Property<Guid?>("UserImageId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("UserImageId");

                    b.HasKey("Id");

                    b.ToTable("FileAttachments", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("IsVerified");

                    b.Property<byte[]>("SecretKey")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("SecretKey");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OtpAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CreatedByIp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpiresDate");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("text")
                        .HasColumnName("ReasonRevoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text")
                        .HasColumnName("ReplacedByToken");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text")
                        .HasColumnName("RevokedByIp");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RevokedDate");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("integer")
                        .HasColumnName("AuthenticatorType");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("CountryCode");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Surname");

                    b.Property<int?>("TotalSearchCount")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("TotalSearchCount");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("CountryCode", "PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@domain.com",
                            Name = "Admin",
                            PasswordHash = new byte[] { 211, 27, 64, 116, 243, 181, 79, 178, 93, 143, 56, 84, 65, 151, 179, 61, 152, 21, 73, 57, 209, 184, 198, 61, 222, 103, 123, 49, 139, 153, 64, 137, 184, 83, 150, 207, 113, 107, 16, 170, 89, 253, 88, 16, 119, 76, 88, 57, 130, 84, 61, 33, 227, 0, 30, 160, 163, 148, 141, 29, 100, 209, 179, 225 },
                            PasswordSalt = new byte[] { 212, 49, 7, 145, 47, 195, 238, 140, 101, 255, 6, 233, 231, 254, 134, 26, 101, 190, 65, 113, 181, 199, 43, 162, 186, 71, 214, 90, 166, 106, 3, 149, 87, 158, 167, 211, 149, 77, 27, 126, 22, 73, 53, 22, 36, 16, 198, 243, 140, 100, 227, 8, 26, 123, 154, 237, 0, 116, 130, 87, 18, 254, 36, 235, 55, 73, 210, 107, 165, 152, 69, 58, 2, 203, 242, 96, 134, 254, 53, 7, 171, 151, 240, 66, 122, 112, 129, 118, 207, 16, 239, 26, 191, 70, 33, 106, 117, 78, 109, 199, 245, 193, 73, 87, 207, 60, 151, 213, 85, 156, 210, 204, 24, 105, 129, 161, 150, 106, 23, 181, 68, 54, 133, 116, 39, 160, 142, 32 },
                            PhoneNumber = "5555555555",
                            Surname = "User",
                            TotalSearchCount = 0,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "user@domain.com",
                            Name = "Standard",
                            PasswordHash = new byte[] { 154, 3, 50, 192, 180, 109, 197, 114, 231, 48, 7, 61, 221, 53, 12, 26, 239, 187, 196, 6, 168, 188, 238, 17, 8, 15, 73, 81, 244, 163, 255, 16, 225, 70, 179, 184, 41, 177, 124, 166, 253, 168, 60, 182, 167, 216, 26, 203, 95, 100, 191, 36, 54, 163, 134, 197, 36, 213, 81, 76, 170, 227, 192, 219 },
                            PasswordSalt = new byte[] { 13, 165, 69, 249, 184, 113, 155, 108, 63, 220, 11, 68, 94, 145, 56, 172, 97, 252, 221, 228, 204, 97, 174, 168, 125, 208, 155, 197, 148, 50, 201, 30, 29, 150, 75, 133, 95, 19, 220, 209, 12, 107, 230, 2, 189, 43, 39, 27, 10, 123, 94, 194, 98, 67, 150, 5, 251, 90, 175, 134, 122, 114, 185, 47, 110, 36, 196, 177, 73, 80, 133, 204, 78, 131, 235, 161, 244, 144, 230, 6, 50, 74, 208, 250, 74, 195, 84, 150, 242, 217, 173, 77, 82, 90, 201, 104, 250, 64, 138, 83, 156, 216, 222, 43, 47, 154, 143, 204, 217, 231, 4, 78, 124, 29, 228, 198, 169, 162, 232, 92, 6, 176, 176, 52, 181, 200, 197, 196 },
                            PhoneNumber = "5555555556",
                            Surname = "User",
                            TotalSearchCount = 0,
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "demo@domain.com",
                            Name = "Demo",
                            PasswordHash = new byte[] { 250, 15, 224, 67, 150, 92, 67, 216, 69, 218, 50, 243, 228, 234, 45, 196, 126, 191, 47, 65, 52, 210, 86, 2, 202, 143, 226, 2, 174, 217, 49, 118, 4, 210, 9, 20, 68, 250, 23, 20, 100, 207, 248, 134, 124, 165, 177, 16, 171, 165, 239, 20, 197, 1, 149, 85, 208, 125, 148, 63, 51, 47, 215, 206 },
                            PasswordSalt = new byte[] { 138, 185, 215, 186, 217, 41, 180, 129, 99, 127, 141, 41, 39, 243, 212, 6, 235, 130, 82, 125, 220, 189, 169, 31, 113, 131, 147, 17, 49, 112, 154, 86, 155, 25, 208, 171, 50, 30, 184, 89, 205, 165, 228, 186, 26, 10, 159, 191, 30, 152, 123, 83, 107, 68, 149, 45, 186, 168, 30, 228, 242, 151, 174, 154, 58, 37, 243, 184, 25, 234, 25, 149, 70, 126, 123, 245, 58, 214, 139, 159, 104, 203, 16, 51, 204, 89, 242, 100, 248, 58, 43, 25, 185, 31, 52, 229, 29, 169, 231, 142, 47, 150, 165, 39, 206, 106, 10, 198, 97, 177, 173, 205, 158, 3, 49, 153, 148, 129, 24, 184, 249, 82, 166, 209, 142, 179, 222, 71 },
                            PhoneNumber = "5555555557",
                            Surname = "User",
                            TotalSearchCount = 0,
                            UserName = "demo"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AuthenticatorType = 0,
                            CountryCode = "+90",
                            CreatedDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "nadircandegirmendere@gmail.com",
                            Name = "Nadir can",
                            PasswordHash = new byte[] { 48, 178, 212, 39, 221, 11, 67, 52, 2, 93, 104, 49, 147, 91, 143, 202, 201, 172, 104, 122, 202, 231, 169, 246, 238, 151, 174, 0, 2, 88, 45, 108, 68, 149, 3, 71, 247, 73, 85, 231, 15, 10, 36, 70, 50, 191, 242, 30, 71, 209, 38, 226, 56, 28, 178, 172, 109, 182, 181, 154, 236, 41, 156, 39 },
                            PasswordSalt = new byte[] { 82, 153, 125, 76, 229, 80, 96, 213, 58, 220, 6, 192, 120, 219, 177, 141, 205, 76, 29, 213, 48, 165, 30, 125, 92, 213, 209, 74, 110, 131, 231, 59, 205, 35, 229, 94, 7, 33, 155, 239, 248, 209, 221, 192, 210, 112, 160, 253, 156, 92, 127, 202, 253, 123, 8, 86, 88, 123, 255, 91, 161, 56, 75, 68, 231, 179, 109, 140, 223, 207, 165, 18, 84, 77, 177, 217, 223, 170, 143, 128, 48, 163, 184, 187, 107, 131, 239, 184, 218, 211, 21, 197, 86, 159, 236, 137, 79, 6, 204, 251, 141, 51, 109, 146, 55, 122, 101, 22, 37, 66, 201, 66, 23, 135, 95, 131, 195, 20, 12, 158, 18, 98, 151, 204, 2, 189, 56, 35 },
                            PhoneNumber = "5555555558",
                            Surname = "Degirmendere",
                            TotalSearchCount = 0,
                            UserName = "cansnow"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<int>("DescriptionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("FileAttachmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("FileAttachmentId");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Tags");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UploadDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FileAttachmentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserImages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("OperationClaimId")
                        .HasColumnType("uuid")
                        .HasColumnName("OperationClaimId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000001"),
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            OperationClaimId = new Guid("00000000-0000-0000-0000-000000000002"),
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("EmailAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("OtpAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserImage", b =>
                {
                    b.HasOne("Domain.Entities.FileAttachment", "FileAttachment")
                        .WithOne("UserImage")
                        .HasForeignKey("Domain.Entities.UserImage", "FileAttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileAttachment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.FileAttachment", b =>
                {
                    b.Navigation("UserImage");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("EmailAuthenticators");

                    b.Navigation("OtpAuthenticators");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserImages");

                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
